//- TODO: Consolidate header
doctype html
html
  head
    title undocumented.io
    //- TODO: Stop hotlinking this
    link(rel="stylesheet",href="https://rawgithub.com/twbs/bootstrap/v3.1.1/dist/css/bootstrap.min.css")
    style.
      blockquote {
        font-size: inherit;
        line-height: inherit;
      }

      img {
        max-width: 100%;
      }
  body
    div.container
      h1.text-center Clipper API
      h2.text-center Research (up to dashboard)

      :markdown
        ### Research existing solutions
        I started by looking for existing GitHub solutions to see if I can gain knowledge from their implementations.

        https://www.google.com/search?q=clipper+card+api

        Two were found:

        - [anthonywu/clippercard][], a Python package from 1 year ago

        [anthonywu/clippercard]: https://github.com/anthonywu/clippercard

        - [Check Clip][], an API and Alfred extension that have been taken down

        [Check Clip]: http://jake.ch/2012/10/20/checkclip/

        ### Cold start
        I skimmed through [anthonywu/clippercard][] but decided to start cold anyway. I navigated to https://www.clippercard.com/ClipperWeb/index.do, opened Firebug, and set Network tab to persist data.

        > `Persist` allows me to review network traffic from previous pages after navigating to another page.

        ![Persist screenshot](research/persist.png)

        Next, I filled out the login form and proceed to the next page.

        ![Login form screenshot](research/login-form.png)

        The request was captured and contained the following information

        ![Login request headers screenshot](research/login-request-headers.png)
        ![Login request post screenshot](research/login-request-post.png)
        ![Login request response screenshot](research/login-request-response.png)

        Next, I took copied the request to its `curl` equivalent via Firebug's `Copy Request as cURL`

        ![Copy as cURL screenshot](research/login-copy-as-curl.png)

        Unfortunately, this yielded an undesired `sessionExpired` result

        ![Login curl screenshot](research/login-curl.png)

        I decided to start removing parameters until it stopped replying with the `sessionExpired` response.

        Then, I took that and slapped it into a `node.js` script. Unfortunately, I realized that I was requesting for something that I did not want.

        https://gist.github.com/twolfson/9543183/f9c66630353a4d05e805458fbf241a25e900b05c

        ### Change of plans
        I went back to [anthonywu/clippercard][] and attempted to reproduce his actions via `curl`. Unfortunately, the results turned up dead.

        ![clippercard screenshot](research/clippercard-curl.png)

        I marked this as a dead-end and went for the heavy weaponry, [Charles Proxy][].

        [Charles Proxy]: http://charlesproxy.com/

        ![Charles Proxy screenshot](research/charles-proxy.png)

        I set up Charles Proxy to intercept all `POST` traffic to/from `www.clippercard.com` and ask me what I wanted to do with it.

        This was done via Charles' breakpoints feature and SSL proxying.

        ![Charles SSL proxying](research/charles-ssl-proxy.png)

        ![Charles breakpoints](research/charles-breakpoints.png)

        Then, I navigate to our login page again, https://www.clippercard.com/ClipperWeb/index.do

        When Charles is proxying SSL, you must accept SSL certificates. I did that.

        ![Accepting Charles Proxy SSL certificate](research/firefox-accept-ssl-certs.png)

        Unfortunately, the home page was slowing down due to proxying so I started fiddling with URLs. I wound up landing on https://www.clippercard.com/ClipperCard/needLogin.jsf

        This page was a blessing in disguise as the form fields were simpler (e.g. did not have `_14` on the end which could be random).

        ![needLogin page](research/needlogin-form.png)

        I attempted to log in once via this page. Success!

        I logged out and logged in again from it. This time, I aborted the request and transferred it into `curl`. I witnessed that I could re-request this request infinite times.

        ![needLogin breakpoint](research/needlogin-breakpoint.png)
        ![needLogin raw request](research/needlogin-raw.png)
        ![needLogin raw curl](research/needlogin-curl.png)

        Using that, I trimmed request parameters (cookie, form, and header) until it returning the `redirect` content.

        ![needLogin curl trimmed](research/needlogin-curl-trimmed.png)

        Then, I transferred to my `node` script.

        https://gist.github.com/twolfson/9543183/9c22c76ac6239caf30efefac99d240e31cd65ea2

        I removed the hardcoded `JSESSIONID/ViewState` and started scraping the GET version of the page for dynamic values/using a cookie jar to collect cookie values.

        https://gist.github.com/twolfson/9543183/85eaa5be1bde5428f9428ccd61539b7432889063

        Eventually, I deduced the necessary components and called it a day.

        https://gist.github.com/twolfson/9543183/bf41d36d648ef08c0cfecc68994d2d0838641e74
